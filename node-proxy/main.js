// Generated by CoffeeScript 1.6.2
(function() {
  var crypto, env, fs, getCredentialsContext, httpProxy, https, log, options, port, server, status, util;

  fs = require("fs");

  https = require("https");

  httpProxy = require("http-proxy");

  crypto = require("crypto");

  util = require("util");

  env = process.env.NODE_ENV || "development";

  port = process.env.PORT || 1337;

  options = {
    https: {
      SNICallback: function(hostname) {
        return getCredentialsContext(hostname);
      },
      cert: myCert,
      key: myKey,
      ca: [myCa]
    },
    router: JSON.parse(fs.readFileSync("" + __dirname + "/proxytable.json"))
  };

  server = httpProxy.createServer(options, status);

  server.listen(port, function() {
    var error;

    try {
      process.setgid("node");
      process.setuid("node");
      log("Downgraded to node user.");
    } catch (_error) {
      error = _error;
      log("Unable to downgrade permissions.");
    }
    return log("Listening ...");
  });

  process.on("SIGTERM", function() {
    return log("Stopped.");
  });

  /* 
  Status middleware. Exposes a light-weight route for checking that the 
  proxy is still responding to requests. Used by Monit.
  */


  status = function(req, res, next) {
    if (req.url === "/ping") {
      return res.end("ok");
    } else {
      return next();
    }
  };

  /* Outputs information to stdout while prefixing an ISO 8601 date.
  */


  log = function(item) {
    var output;

    output = new Date().toISOString() + " " + util.format.apply(null, arguments);
    return util.puts;
  };

  /* Generic function to load the credentials context from disk
  */


  getCredentialsContext = function(cer) {
    return crypto.createCredentials({
      key: fs.readFileSync("" + __dirname + "/certs/" + cer + ".key"),
      cert: fs.readFileSync("" + __dirname + "/certs/" + cer + ".crt")
    }).context;
  };

}).call(this);
